/*Ionic switches these off for some reason*/

em,
i {
    font-style: italic;
}

q:before,
q:after {
    content: "\"";
}

a {
    color: black;
    text-decoration: none;
    /* no underline */
}
/* Infinite scrolls are invisible. They should be represented
   with pther loading indicators*/
ion-infinite-scroll {
    display:none;
}

.select-style {
    padding: 0;
    margin: 6px 0px 6px 6px;
    width: 22px;
    height: 22px;
    overflow: hidden;
    float: right;
}
/* make the select invisible, but put it on the top layer.
   That way, we can display an icon underneath it.*/
.select-style select {
    opacity: 0;
    width: 22px;
    height: 22px;
    position: absolute;
    z-index: 10;
}

.select-style i {
    z-index: 11;
    font-size: 22px;
}

.select-style select:focus {
    outline: none;
}

.enabled-black {
    color: #444;
}

.disabled-grey {
    color: #aaa;
}

.cloak {
    display: none !important;
    opacity: 0;
}


/*before the background image loads, this is visible*/

ion-nav-view {
    background-color: white;
}


ion-nav-view {
    background: url(../img/BG1.jpg);
}


.pane {
    background-color: transparent;
}

.leaflet-popup-content {
    margin-left: 11px;
    margin-top: 3px;
    margin-bottom: 3px;
    /* needs to be big enough to accomodate the X button*/
    margin-right: 18px;
    max-width: 215px;
}

.info-window {
    max-width: 205px !important;
    max-height: 100px;
    align-content: center;
    overflow: hidden;
}

.info-window h6 {
    margin: 2px !important;
}

.info-window p {
    margin: 2px !important;
}

.info-window-spinner {
    align-self: center !important;
}

.media-button {
    font-size: 30px !important;
}

.media-content {
    padding-left: 7px;
    padding-right: 7px;
}

.popover {
    height: auto !important;
    width: 70% !important;
}

.popover ion-header-bar {
    position: relative;
}

.popover ion-content {
    top: 0;
    position: relative;
}

overscroll-pane {
    background-color: transparent !important;
    height: 100%;
}

.transparent {
    background: transparent !important;
}

.bumpdown {
    padding-top: 30%;
    margin-bottom: 0%;
}

.display-card {
    border-radius: 2px;
    margin-left: 10px;
    margin-right: 10px;
    margin-top: 10px;
    margin-bottom: 10px;
    background-color: #EEEEEE;
    padding: 10px;
    box-shadow: 0px 2px 10px #111111;
    font-family: serif;
}


/*Makes sure content floats correctly*/

.clearfix:after {
    content: " ";
    /* Older browser do not support empty content */
    visibility: hidden;
    display: block;
    height: 0;
    clear: both;
}

.list-item-div {
    padding-left: 5px;
    padding-right: 5px;
    padding-bottom: 2.5px;
    display: none;
    /*only display if the element has the attribute 'shown-list-item-div'*/
}

/*
 * I feel like this one needs some explanation/apology.
 * List items often need to be filtered out of lists, but it is not performant
 * to remove them using ng-if, so instead we just hide them. However, since we
 * draw borders *between* list items, we need to be able to select for displayed
 * list items which follow other displayed list items (but not hidden ones). 
 * This means that hidden, not shown, must be the default.
 *
 * Text in list items must also sometimes be truncated using dotdotdot, which must
 * be an attribute. However, since dotdotdot relies on knowing the size of its 
 * target, it must be applied when the element appears. While it can watch the
 * size of the element, this causes flickering. Instead, we apply the dotdotdot
 * attr only when the element becomes visible, using ng-attr-dotdotdot. In order
 * for these to synchronize correctly, shown-list-item-div must also be an attr.
 */

[shown-list-item-div] {
    display: block;
}

[shown-list-item-div] ~ [shown-list-item-div] {
    padding-top: 2.5px;
    border-top-color: silver;
    border-top-width: 1px;
    border-style: solid;
}

.list-item-indent {
    margin-left: 12px;
    padding-right: 0px !important;
}

.greyout {
    color: silver;
}

.italic {
    font-style: italic !important;
}

.centered-list-item {
    text-align: center;
}

.error-icon {
    color: firebrick;
    font-size: 32px;
}

.filter-area {}

.filter-icon {
    padding-left: 6px;
    padding-right: 6px;
}

.filter-bar {
    margin-bottom: 5px;
    padding: 0px 0px 0px 5px !important;
}

.list-item-title {
    margin-top: 4px;
    font-size: 12px;
    color: #222;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

.list-item-subtitle {
    font-size: 10px;
    line-height: 13px;
    max-height: 44px;
    margin-top: 3px;
    color: #626262;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

.loader-subtitle {
    font-family: sans-serif;
}

.list-item-distance {
    font-size: 10px;
    font-family: sans-serif;
    color: #626262;
    float: right;
}

.list-item-thumb {
    object-fit: cover;
    width: 60px;
    height: 60px;
    margin: 4px 4px 4px 0px;
}

.gallery-thumb {
    object-fit: cover;
    width: 80px;
    max-height: 60px;
    margin: 4px 4px 4px 4px;
}

.up-next-button-row {
    font-size: 12px;
    color: #626262;
    padding-top: 4px;
}

.pin-image {
    padding-right: 6px;
    padding-top: 4px;
    height: 32px;
}

.audio-button {
    float: right;
    margin-right: 7px;
    margin-left: 7px;
}

.zoom-scroll {
    height: 100%;
}

.zoom-scroll .scroll {
    min-height: 100% !important;
    align-items: center;
    background-color: transparent;
}

.image-modal {
    height: 100%;
}

.modal-close {
    position: absolute;
    right: 0;
    /*Make this clickable*/
    z-index: 30;
    color: darkgray;
    font-size: 32px;
}

.fullscreen-image {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
}

.image-modal-text {
    color: darkgray;
    position: absolute;
    bottom: 0;
}

.image-modal-text .image-title {
    font-size: 14px;
}

.image-modal-text .image-description {
    font-size: 10px;
    line-height: 13px;
}

.landmark-text-card-title {
    font-variant: small-caps;
    font-family: serif;
    text-align: center;
}

.landmark-text-card-lede {
    font-style: italic;
    padding-left: 20px;
    padding-right: 20px;
}

.landmark-text-card-tags {
    color: darkgray;
}

.landmark-text-card br {
    line-height: 250%;
}

async-toggle {
    position: relative;
    display: inline-block;
    pointer-events: auto;
    margin: -5px;
    padding: 5px;
}
.async-toggle-on + .track {
    border-color: #4cd964;
    background-color: #4cd964;
}
.async-toggle.dragging .handle {
    background-color: #f2f2f2 !important;
}


/* the track appearance when the toggle is "off" */
.async-toggle .track {
    -webkit-transition-timing-function: ease-in-out;
    transition-timing-function: ease-in-out;
    -webkit-transition-duration: 0.3s;
    transition-duration: 0.3s;
    -webkit-transition-property: background-color, border;
    transition-property: background-color, border;
    display: inline-block;
    box-sizing: border-box;
    width: 51px;
    height: 31px;
    border: solid 2px #e6e6e6;
    border-radius: 20px;
    background-color: #fff;
    content: ' ';
    cursor: pointer;
    pointer-events: none;
}

/* Fix to avoid background color bleeding */
/* (occurred on (at least) Android 4.2, Asus MeMO Pad HD7 ME173X) */
.platform-android4_2 .async-toggle .track {
    -webkit-background-clip: padding-box;
}

.async-toggle-on .track {
    border-color: #33cd5f;
    background-color: #33cd5f;
}

.async-toggle-working .track {
    border-color: #8ddaa3;
    background-color: #99e6af;
}


/* the handle (circle) thats inside the toggle's track area */
/* also the handle's appearance when it is "off" */
.async-toggle .handle {
    -webkit-transition: 0.3s cubic-bezier(0, 1.1, 1, 1.1);
    transition: 0.3s cubic-bezier(0, 1.1, 1, 1.1);
    -webkit-transition-property: background-color, transform;
    transition-property: background-color, transform;
    position: absolute;
    display: block;
    width: 27px;
    height: 27px;
    border-radius: 27px;
    background-color: #fff;
    top: 7px;
    left: 7px;
    box-shadow: 0 2px 7px rgba(0, 0, 0, 0.35), 0 1px 1px rgba(0, 0, 0, 0.15);
}
.async-toggle .handle:before {
    position: absolute;
    top: -4px;
    left: -21.5px;
    padding: 18.5px 34px;
    content: " ";
}

.async-toggle-on .handle {
    -webkit-transform: translate3d(20px, 0, 0);
    transform: translate3d(20px, 0, 0);
}

.async-toggle-working .handle {
    -webkit-transform: translate3d(10px, 0, 0);
    transform: translate3d(10px, 0, 0);
}